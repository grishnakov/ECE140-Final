import os
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv

load_dotenv()


def init_db():
    """
    Initializes the database by creating the necessary tables:
    """
    # db_host = os.getenv("MYSQL_HOST", "db")
    # db_user = os.getenv("MYSQL_USER")
    # db_password = os.getenv("MYSQL_PASSWORD")
    # db_database = os.getenv("MYSQL_DATABASE")

    try:
        connection = mysql.connector.connect(
            host=os.getenv("MYSQL_HOST", "db"),
            port=int(os.getenv("MYSQL_PORT")),
            user=os.getenv("MYSQL_USER"),
            password=os.getenv("MYSQL_PASSWORD"),
            database=os.getenv("MYSQL_DATABASE"),
            ssl_ca=os.getenv("MYSQL_SSL_CA"),  # Path to CA certificate file
            ssl_verify_identity=True,
        )

        if connection.is_connected():
            cursor = connection.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS readings (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    device_id INT,
                    reading FLOAT,
                    reading_type VARCHAR(255),
                    timestamp DATETIME
                );
            """)
            # Create users table for storing credentials.
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    email VARCHAR(255) NOT NULL,
                    password VARCHAR(255) NOT NULL,
                    name VARCHAR(255) NOT NULL,
                    location VARCHAR(255) NOT NULL
                );
            """)

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_devices (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_id INT NOT NULL,
                    device_id INT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users(id)
                );
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS clothes (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_id INT NOT NULL,
                    item_name VARCHAR(255),
                    item_desc VARCHAR(255),
                    timestamp DATETIME,
                    FOREIGN KEY (user_id) REFERENCES users(id)
                );
            """)

            connection.commit()
            print("Database initialized successfully.")
            cursor.close()
        connection.close()
    except Error as e:
        print("error while connecting to mysql", e)


def clear_db():
    """
    Connects to the database and drops all tables.
    This function disables foreign key checks before dropping tables
    and re-enables them afterwards.
    GENERATED BY GPT
    """
    # db_host = os.getenv("MYSQL_HOST", "db")
    # db_user = os.getenv("MYSQL_USER")
    # db_password = os.getenv("MYSQL_PASSWORD")
    # db_database = os.getenv("MYSQL_DATABASE")

    try:
        connection = mysql.connector.connect(
            host=os.getenv("MYSQL_HOST", "db"),
            port=int(os.getenv("MYSQL_PORT")),
            user=os.getenv("MYSQL_USER"),
            password=os.getenv("MYSQL_PASSWORD"),
            database=os.getenv("MYSQL_DATABASE"),
            ssl_ca=os.getenv("MYSQL_SSL_CA"),  # Path to CA certificate file
            ssl_verify_identity=True,
        )

        if connection.is_connected():
            cursor = connection.cursor()
            # Disable foreign key checks to avoid issues with dependent tables.
            cursor.execute("SET FOREIGN_KEY_CHECKS = 0;")

            # Retrieve all table names.
            cursor.execute("SHOW TABLES;")
            tables = cursor.fetchall()

            # Drop each table.
            for (table_name,) in tables:
                print(f"Dropping table `{table_name}`...")
                cursor.execute(f"DROP TABLE IF EXISTS `{table_name}`;")

            # Re-enable foreign key checks.
            cursor.execute("SET FOREIGN_KEY_CHECKS = 1;")
            connection.commit()
            print("Database cleared: all tables have been dropped.")
            cursor.close()

        connection.close()

    except Error as e:
        print("Error while clearing the database:", e)
